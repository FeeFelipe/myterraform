# myterraform

I should to use docker to orchestrate the Nomad because my Mac is 2012 and doent support the new OS version, so I need to run the Nomad from the container


aws --endpoint-url=http://localhost:4566 s3 ls
aws --endpoint-url=http://localhost:4566 sqs list-queues
aws --endpoint-url=http://localhost:4566 dynamodb list-tables


Terraform + LocalStack use case is to simulate AWS S3 and SQS locally for development/testing, without spending money on AWS.

I‚Äôll create a self-contained Terraform module that:

Creates an S3 bucket

Creates an SQS queue

Creates an IAM user with permissions for these resources

Works fully on LocalStack



docker exec -it terraform sh

terraform init
terraform plan -var-file=dev.tfvars
terraform apply -auto-approve -var-file=dev.tfvars






Local AWS Environment with Nomad, LocalStack, Terraform, and AWS CLI
This project provides a fully local AWS development environment using:

Nomad ‚Äì Lightweight container orchestrator

LocalStack ‚Äì AWS services emulator

Terraform ‚Äì Infrastructure as Code for AWS resources

AWS CLI ‚Äì For testing AWS services locally

It is designed to develop and test cloud-native applications locally without incurring AWS costs.

Features
üê≥ Docker Compose environment with:

Nomad in dev mode (single node)

LocalStack with S3, SQS, DynamoDB

AWS CLI container for local testing

Terraform container for infrastructure automation

‚úÖ Persistent LocalStack storage

‚úÖ Preconfigured dummy AWS credentials (test/test)

‚úÖ Modular Terraform setup for S3, SQS, IAM user

Project Structure
bash
Copiar
Editar
.
‚îú‚îÄ docker-compose.yml        # Defines Nomad, LocalStack, Terraform, AWS CLI
‚îú‚îÄ jobs/                     # Example Nomad jobs
‚îú‚îÄ init/                     # Scripts auto-executed by LocalStack
‚îú‚îÄ localstack-data/          # Persistent LocalStack data
‚îú‚îÄ aws/credentials           # Dummy AWS credentials
‚îî‚îÄ terraform-localstack/     # Terraform configuration
‚îú‚îÄ main.tf
‚îú‚îÄ providers.tf
‚îú‚îÄ variables.tf
‚îú‚îÄ outputs.tf
‚îú‚îÄ dev.tfvars
‚îî‚îÄ modules/
‚îú‚îÄ s3/
‚îú‚îÄ sqs/
‚îî‚îÄ iam-user/
1Ô∏è‚É£ Start the Environment
Start all services in the background:

bash
Copiar
Editar
docker compose up -d
Check running containers:

bash
Copiar
Editar
docker ps
Access:

Nomad UI: http://localhost:4646

LocalStack endpoint: http://localhost:4566

2Ô∏è‚É£ Test AWS CLI
The AWS CLI container comes pre-configured with dummy credentials.
Enter the container:

bash
Copiar
Editar
docker exec -it awscli bash
List all S3 buckets in LocalStack:

bash
Copiar
Editar
aws --endpoint-url=http://localstack:4566 s3 ls
Create a bucket and a queue:

bash
Copiar
Editar
aws --endpoint-url=http://localstack:4566 s3 mb s3://my-local-bucket
aws --endpoint-url=http://localstack:4566 sqs create-queue --queue-name my-local-queue
3Ô∏è‚É£ Use Terraform for Local AWS Resources
Enter the Terraform container:

bash
Copiar
Editar
docker exec -it terraform sh
Initialize the Terraform project:

bash
Copiar
Editar
terraform init
Preview changes with your dev environment variables:

bash
Copiar
Editar
terraform plan -var-file=dev.tfvars
Apply changes to LocalStack:

bash
Copiar
Editar
terraform apply -auto-approve -var-file=dev.tfvars
Verify resources with AWS CLI:

bash
Copiar
Editar
aws --endpoint-url=http://localstack:4566 s3 ls
aws --endpoint-url=http://localstack:4566 sqs list-queues
aws --endpoint-url=http://localstack:4566 iam list-users
4Ô∏è‚É£ Example Terraform Modules
This project includes modular Terraform code to provision:

S3 bucket

SQS queue

IAM user with S3/SQS access

Modules are reusable and environment-aware via .tfvars files.

5Ô∏è‚É£ Stop the Environment
To stop and remove all containers:

bash
Copiar
Editar
docker compose down
To remove persistent LocalStack data:

bash
Copiar
Editar
docker compose down -v
rm -rf localstack-data




üîê Vault Plugin ‚Äì myengine
O que √©:
Pense nele como um ‚Äúmini-servi√ßo‚Äù que roda dentro do Vault e sabe entregar segredos e configura√ß√µes espec√≠ficas para o nosso ambiente. √â um secrets engine customizado, que n√≥s mesmos constru√≠mos em Go, usando a API oficial da HashiCorp.

O que ele faz:

Armazena configura√ß√µes seguras ‚Äî por exemplo, um sufixo de bucket que ser√° usado em todo o provisionamento.

Gera credenciais sob demanda ‚Äî como um endpoint que retorna chaves de acesso e segredo no estilo AWS, sem precisar gravar isso em c√≥digo ou arquivos.

Tudo isso seguindo o fluxo padr√£o do Vault: registro do plugin, habilita√ß√£o no path /myengine, configura√ß√£o via API, e leitura segura por qualquer aplica√ß√£o ou automa√ß√£o.

Por que √© importante:

Centraliza configura√ß√µes e credenciais num √∫nico ponto confi√°vel.

Elimina hard-coding de segredos no Terraform, CI/CD ou c√≥digo de aplica√ß√£o.

√â extens√≠vel ‚Äî podemos adicionar novos endpoints e l√≥gicas no futuro.

üì¶ Terraform Provider ‚Äì localmeta
O que √©:
√â um provider Terraform que n√≥s criamos para simular ou gerar artefatos de infraestrutura localmente, sem depender de uma nuvem real. Tamb√©m foi escrito em Go, usando o Terraform Plugin SDK v2.

O que ele faz:

Cria recursos ‚Äúlocais‚Äù ‚Äî por exemplo, um localmeta_bucket que n√£o existe na AWS, mas gera um arquivo JSON com todos os metadados como se fosse um bucket real.

O diret√≥rio de sa√≠da (output_dir) √© definido na configura√ß√£o e todos os arquivos s√£o gerados l√°.

Perfeito para desenvolvimento, testes e demonstra√ß√µes, onde queremos simular a infraestrutura antes de usar um provedor real.

Por que √© importante:

Permite validar fluxos de provisionamento sem custos de cloud e sem depender de internet.

Facilita a integra√ß√£o com outras ferramentas, pois os metadados ficam salvos em arquivos leg√≠veis.

Serve como ‚Äúmolde‚Äù para criar outros providers que interajam com APIs reais no futuro.

üéØ Como eles trabalham juntos
O Vault Plugin guarda, de forma segura, o bucket_suffix e credenciais necess√°rias.

O Terraform Provider localmeta l√™ essas informa√ß√µes diretamente do Vault e gera os artefatos locais j√° com os valores corretos.

O resultado √© um fluxo de provisionamento que herda automaticamente as configura√ß√µes seguras, sem precisar tocar no c√≥digo do Terraform quando algo muda no Vault.